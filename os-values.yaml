# override to use internal repo
image: "docker.artifact.xtraman.org/opensearchproject/opensearch"

# Allows you to add any config files in {{ .Values.opensearchHome }}/config
# such as opensearch.yml and log4j2.properties
config:
  opensearch.yml:
    cluster.name: rapid-elk-cluster
    ######## Start OpenSearch Security Demo Configuration ########
    # todo WARNING: revise all the lines below before you go into production
    plugins:
      security:
        ssl:
          http:
            enabled: false
        allow_unsafe_democertificates: true  # todo: don't leave as default?
        authcz:
          admin_dn:
            - OU=RAPID,O=CSIT,L=Singapore,ST=Singapore,C=SG
        restapi:
          roles_enabled: [ "all_access", "security_rest_api_access", "admin" ]
        system_indices:
          indices:
            [
                ".opendistro-alerting-config",
                ".opendistro-alerting-alert*",
                ".opendistro-anomaly-results*",
                ".opendistro-anomaly-detector*",
                ".opendistro-anomaly-checkpoints",
                ".opendistro-anomaly-detection-state",
                ".opendistro-reports-*",
                ".opendistro-notifications-*",
                ".opendistro-notebooks",  # todo: remove? not in internal settings
                ".opendistro-asynchronous-search-response*",  # todo: remove? not in internal settings
            ]
    ######## End OpenSearch Security Demo Configuration ########
    cluster.routing.allocation.disk.threshold_enabled: false
    node.max_local_storage_nodes: 3

securityConfig:
  enabled: true
  path: "/usr/share/opensearch/plugins/opensearch-security/securityconfig"
  actionGroupsSecret:
  configSecret:
  internalUsersSecret:
  rolesSecret:
  rolesMappingSecret:
  tenantsSecret:
  #The following option simplifies securityConfig by using a single secret and specifying the respective secrets in the corresponding files instead of creating different secrets for config,internal users, roles, roles mapping and tenants
  #Note that this is an alternative to the above secrets and shouldn't be used if the above secrets are used
  config:
    securityConfigSecret:
    data:
      config.yml:
        _meta:
          type: "config"
          config_version: 2
        config:
          dynamic:
            kibana:
              multitenancy_enabled: true
              server_username: admin
              index: '.kibana'
            do_not_fail_on_forbidden: false
            http:
              anonymous_auth_enabled: false
              xff:
                enabled: true
                internalProxies: '.*' # regex pattern
                remoteIpHeader: "x-forwarded-for"
            authc:
              basic_internal_auth_domain:
                description: "Authenticate via HTTP Basic against internal users database"
                http_enabled: true
                transport_enabled: true
                order: 1
                http_authenticator:
                  type: basic
                  challenge: false
                authentication_backend:
                  type: internal
              proxy_auth_domain:
                description: "Authenticate via Proxy Header"
                http_enabled: true
                transport_enabled: true
                order: 0
                http_authenticator:
                  type: proxy
                  challenge: false
                  config:
                    user_header: "X-Username"
                    roles_header: "X-Roles"
                    roles_separator: ","
                authentication_backend:
                  type: noop
      internal_users.yml:
        _meta:
          type: "internalusers"
          config_version: 2
        admin:
          hash: "bcript hash generated with plugins/tools/hash.sh"
          reserved: true
          backend_roles:
            - "admin"
        kibanaserver:
          hash: "bcript hash generated with plugins/tools/hash.sh"
          reserved: true
      roles.yml:
        _meta:
          type: "roles"
          config_version: 2
        kibana_read_only:
          reserved: true
        security_rest_api_access:
          reserved: true
        alerting_view_alerts:
          reserved: true
          index_permissions:
            - index_patterns: [ ".opendistro-alerting-alert*" ]
              allowed_actions: [ "read" ]
        alerting_crud_alerts:
          reserved: true
          index_permissions:
            - index_patterns: [ ".opendistro-alerting-alert*" ]
              allowed_actions: [ "crud" ]
        alerting_full_access:
          reserved: true
          index_permissions:
            - index_patterns:
                - ".opendistro-alerting-config"
                - ".opendistro-alerting-alert*"
              allowed_actions: [ "crud" ]
        manage_index:
          index_permissions:
            - index_patterns: [ "*" ]
              allowed_actions: [ "indices:admin/resolve/index" ]
      rolesMapping.yml:
        _meta:
          type: "rolesmapping"
          config_version: 2
        all_access:
          reserved: false
          backend_roles: [ "admin" ]
          description: "Maps admin to all_access"
        kibana_user:
          reserved: false
          backend_roles: [ "access" ]
          description: "Maps access to kibana_user"
        manage_index:
          reserved: false
          backend_roles: [ "access" ]
          description: "Maps access to manage_index, to allow user to create index partitions"

esJavaOpts: "-Xmx4g -Xms4g"
